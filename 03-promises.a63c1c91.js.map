{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAgCtC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,6CAERC,EAAO,yCAAyC,GAEjDH,EAAM,G,CAzCbL,EAAOa,QAEPb,EAAOc,iBAAiB,SACxB,SAA4BC,GAC1B,MAAMV,MAAEA,EAAKW,KAAEA,EAAIC,OAAEA,GAAWF,EAAEG,cAAcC,SAE9CC,OAAOf,EAAMgB,OAAS,GACtBD,OAAOJ,EAAKK,OAAS,GACrBD,OAAOH,EAAOI,OAAS,GAEvBC,EAAAxB,GAASyB,OAAOC,QAAQ,6BACtBxB,EAAKyB,iBAAiBC,aAAa,WAAY,KAEjD1B,EAAOyB,iBAAiBE,gBAAgB,W,IAI5C3B,EAAOc,iBAAiB,UAExB,SAAkBC,GAChBA,EAAEa,iBACF,IAAIvB,EAAQe,OAAOL,EAAEc,OAAOV,SAASd,MAAMgB,OAC3C,MAAML,EAAOI,OAAOL,EAAEc,OAAOV,SAASH,KAAKK,OACrCJ,EAASG,OAAOL,EAAEc,OAAOV,SAASF,OAAOI,OAE/C,IAAK,IAAIjB,EAAW,EAAGA,GAAYa,EAAQb,GAAY,EACrDD,EAAcC,EAAUC,GACxBA,GAAgBW,C,IAkBpBb,EAAcC,SAAUC,OACrByB,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBiB,EAAAxB,GAASyB,OAAOQ,QAAQ,uBAAqB3B,QAAiBC,MAAU,IAEzE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBiB,EAAAxB,GAASyB,OAAOC,QAAQ,sBAAoBpB,QAAeC,MAAU","sources":["src/js/03-promises.js"],"sourcesContent":["// all modules\nimport Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nformEl.reset();\n\nformEl.addEventListener('input', onVerifyValueInput);\nfunction onVerifyValueInput(e) {\n  const { delay, step, amount } = e.currentTarget.elements;\n  if (\n    Number(delay.value) < 0 ||\n    Number(step.value) < 0 ||\n    Number(amount.value) < 0\n  ) {\n    Notiflix.Notify.failure('❌ Values must be positive');\n    formEl.lastElementChild.setAttribute('disabled', '');\n  } else {\n    formEl.lastElementChild.removeAttribute('disabled');\n  }\n}\n\nformEl.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  let delay = Number(e.target.elements.delay.value);\n  const step = Number(e.target.elements.step.value);\n  const amount = Number(e.target.elements.amount.value);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay);\n    delay = delay + step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve('Success! Value passed to resolve function');\n      } else {\n        reject('Error! Error passed to reject function');\n      }\n    }, delay);\n  });\n}\n\ncreatePromise(position, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","reset","addEventListener","e","step","amount","currentTarget","elements","Number","value","$parcel$interopDefault","Notify","failure","lastElementChild","setAttribute","removeAttribute","preventDefault","target","then","success","catch"],"version":3,"file":"03-promises.a63c1c91.js.map"}